-- Variables
local Players = game:GetService("Players")
local Player = Players.LocalPlayer

-- Services
local HttpService = game:GetService("HttpService")
local Uis = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TeleportService = game:GetService("TeleportService")

-- Loading ui
local Luna = loadstring(game:HttpGet("https://raw.githubusercontent.com/maxcomuk/Vortex-Hub/main/LunaUi.lua", true))()

-- Creating Window
local Window = Luna:CreateWindow({
	Name = "Grow A Garden - Vortex Hub", -- This Is Title Of Your Window
	Subtitle = "V1.1", -- A Gray Subtitle next To the main title.
	LogoID = nil, -- The Asset ID of your logo. Set to nil if you do not have a logo for Luna to use.
	LoadingEnabled = true, -- Whether to enable the loading animation. Set to false if you do not want the loading screen or have your own custom one.
	LoadingTitle = "Vortex Hub Loading...", -- Header for loading screen
	LoadingSubtitle = "Created By Yours Truly maxcomuk", -- Subtitle for loading screen
})

-- Key System
local KeyFile = "Grow_a_garden_key.txt"
local ValidateKeyUrl = "https://work.ink/_api/v2/token/isValid/"
local IsKeyValid = false

-- Load Saved Key
local function LoadSavedKey()
	if isfile and readfile and isfile(KeyFile) then
		return readfile(KeyFile)
	end
end

-- Save Key
local function SaveKey(key)
	if writefile then
		writefile(KeyFile, key)
	end
end

-- Validate Key
local function ValidateKey(key)
	local Success, Response = pcall(function()
		return (
			game:HttpGet(ValidateKeyUrl .. HttpService:UrlEncode(key))
		)
	end)
	if Success then
		local Data = HttpService:JSONDecode(Response)
		if Data.valid then
			return true
		end
	else
		return false
	end
end

-- Key System
local KeySystem = Window:CreateTab({
	Name = "Key System",
	Icon = "security",
	ImageSource = "Material",
	ShowTitle = true
})

-- Key Section
local KeySection = KeySystem:CreateSection("If You Cant Copy The Link To ClipBoard Contact Me Via Discord")

-- Get Key Link
local GetKeyLink = KeySystem:CreateButton({
	Name = "Copy Key Link To ClipBoard",
	Description = nil,
	Callback = function()
		if setclipboard then
			setclipboard("https://workink.net/1ZQb/hrvpte1t")

			Luna:Notification({
				Title = "Key Link Copied To ClipBoard",
				Icon = "notifications_active",
				ImageSource = "Material",
				Content = ""
			})
		else
			Luna:Notification({
				Title = "Unable To Copy Key Link To ClipBoard",
				Icon = "notifications_active",
				ImageSource = "Material",
				Content = "Your Executor Does Not Support This Feature Contact Me Via Discord",
			})
		end	
	end
})

-- Key Input
local KeyInput = KeySystem:CreateInput({
	Name = "Input Key Link Here",
	Description = nil,
	PlaceholderText = "",
	CurrentValue = "", 
	Numeric = false,
	MaxCharacters = nil,
	Enter = true,
    	Callback = function(Text)
			local Key = Text

			Luna:Notification({
				Title = "Validating Key Please Wait ...",
				Icon = "notifications_active",
				ImageSource = "Material",
				Content = ""
			})

			if ValidateKey(Key) then
				Luna:Notification({
					Title = "Key Valid",
					Icon = "check_circle",
					ImageSource = "Material",
					Content = "Loading Exploits",
				})
				IsKeyValid = true

				SaveKey(Key)
			else
				Luna:Notification({
					Title ="Key Invalid",
					Icon = "dangerous",
					ImageSource = "Material",
					Content = "Please Check That Your Key Is Valid",
				})
				IsKeyValid = false
			end
    	end
}, "KeyInput")

local DiscordLink = KeySystem:CreateSection("Discord Link - https://discord.gg/VS7QcNmmp6")

local SavedKey = LoadSavedKey()
if SavedKey and ValidateKey(SavedKey) then
	Luna:Notification({
		Title = "Saved Key Loaded",
		Icon = "check_circle",
		ImageSource = "Material",
		Content = ""
	})
	IsKeyValid = true
end

repeat
	task.wait()
until IsKeyValid
--------------------------------------------------------------------------------------------------
-- Events
local PlantingEvent = game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Plant_RE")
local SellAllEvent = game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Sell_Inventory")
local PurchaseEvent = game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("BuySeedStock")
local PurchaseGearEvent = game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("BuyGearStock")

-- Creating Main Tab
local MainTab = Window:CreateTab({
    Name = "Main",
    Icon = "dashboard",
    ImageSource = "Material",
    ShowTitle = true
})

-- Auto Plant Configs
local function findfarm()
	local Target = nil
	local Folder = workspace.Farm
	if Folder then
		for _, object in pairs(Folder:GetChildren()) do
			for _, child in pairs(object:GetChildren()) do
				if child.Name == "Sign" then
					for _, sgn in pairs(child:GetChildren()) do
						if sgn.Name == "Core_Part" then
							for _, gui in pairs(sgn:GetChildren()) do
								if gui.Name == "SurfaceGui" then
									for _, frame in pairs(gui:GetChildren()) do
										for _, label in pairs(frame:GetChildren()) do
											if label.Name == "TextLabel" then
												local fullText = label.Text
												local labelname = fullText:match("^(.-)'s Garden$")
												if labelname and labelname == Player.Name then
													Target = object
													return Target
												end
											end
										end
									end
								end
							end
						end
					end
				end
			end
		end
	end
	return Target
end

local generatedPositions = {} -- store previous spots to avoid overlap
local MIN_DISTANCE = 3 -- minimum distance between planting spots

math.randomseed(tick() * 1000) -- seed randomness once per session (or per call)

local function isFarEnough(pos)
	for _, oldPos in ipairs(generatedPositions) do
		if (oldPos - pos).Magnitude < MIN_DISTANCE then
			return false
		end
	end
	return true
end

local function generateplantingspot()
	local farm = findfarm()
	local plantingpart = nil

	if farm then
		for _, object in pairs(farm:GetChildren()) do
			if object.Name == "Important" then
				for _, child in pairs(object:GetChildren()) do
					if child.Name == "Plant_Locations" then
						for _, fld in pairs(child:GetChildren()) do
							if fld.Name == "Can_Plant" then
								plantingpart = fld
								break
							end
						end
					end
				end
			end
		end
	end

	if plantingpart then
		local size = plantingpart.Size
		local cf = plantingpart.CFrame

		for attempt = 1, 20 do -- try 20 times max to find a good spot
			local offsetX = (math.random() - 0.5) * size.X
			local offsetZ = (math.random() - 0.5) * size.Z
			local localOffset = Vector3.new(offsetX, size.Y / 2, offsetZ)
			local worldPos = cf:PointToWorldSpace(localOffset)

			if isFarEnough(worldPos) then
				table.insert(generatedPositions, worldPos)
				return worldPos
			end
		end

		-- If no spot found after 20 tries, fallback to center
		return cf.Position + Vector3.new(0, size.Y / 2, 0)
	end

	return nil
end

local function findequippedseed()
	local Target = nil

	local Char = Player.Character or Player.CharacterAdded:Wait()
	if Char then
		for _, object in pairs(Char:GetChildren()) do
			if object:IsA("Tool") then
				for _, child in pairs(object:GetChildren()) do
					if child.Name == "Seed Local Script" then
						Target = object
						return Target
					end
				end
			end
		end
	end

	return Target
end

local function findstoredseed()
	local Target = nil

	for _, object in pairs(Player.Backpack:GetChildren()) do
		if object:IsA("Tool") and object:FindFirstChild("Seed Local Script") then
			Target = object
			break
		end
	end

	return Target
end

local HandPlantConnection
local AutoPlantHandState = false
local autoplanthand = MainTab:CreateToggle({
	Name = "Auto Plant Equipped Seeds",
	Description = "Plants only the seeds that you currently have equipped",
	CurrentValue = false,
	Callback = function(state)
		if HandPlantConnection then
			HandPlantConnection:Disconnect()
			HandPlantConnection = nil
		end

		AutoPlantHandState = state

		local PlantingDebounce = false
		local function PlantSeed()
			local plantpos = generateplantingspot()
			if plantpos then
				local seedfound = findequippedseed()
				if seedfound then
					local fullseedname = tostring(seedfound)
					local seedname = fullseedname:match("^(.-) Seed")
					args = {
						Vector3.new(plantpos.X, 0.13552704453468323, plantpos.Z),
						seedname
					}
					PlantingEvent:FireServer(unpack(args))
				end
			else
				warn("Unable To Find Planting Spot")
			end
		end

		if AutoPlantHandState then
			HandPlantConnection = RunService.Heartbeat:Connect(function()
				if PlantingDebounce then return end
				PlantingDebounce = true

				PlantSeed()
				task.wait(0.5)

				PlantingDebounce = false
			end)
		end
	end
})

local invplantconnection
local invplantstate = false
local autoplantinv = MainTab:CreateToggle({
	Name = "Auto Plant Inventory",
	Description = "Plants everything inside your inventory",
	CurrentValue = false,
	Callback = function(state)
		if invplantconnection then
			invplantconnection:Disconnect()
			invplantconnection = nil
		end

		invplantstate = state

		local Char = Player.Character or Player.CharacterAdded:Wait()
		local Hum = Char:WaitForChild("Humanoid")

		local PlantingDebounce = false
		local function plantseed()
			local plantpos = generateplantingspot()
			if plantpos then
				local seedfound = findstoredseed()
				if seedfound then
					Hum:EquipTool(seedfound)
					local fullseedname = tostring(seedfound)
					local seedname = fullseedname:match("^(.-) Seed")
					local args = {
						Vector3.new(plantpos.X, 0.13552704453468323, plantpos.Z),
						seedname
					}
					PlantingEvent:FireServer(unpack(args))

					task.wait(0.1)
					Hum:UnequipTools()
				end
			else
				warn("not found planting spot")
			end
		end

		if invplantstate then
			invplantconnection = RunService.Heartbeat:Connect(function()
				if PlantingDebounce then return end
				PlantingDebounce = true

				plantseed()
				task.wait(0.5)

				PlantingDebounce = false
			end)
		end
	end
})

-- Auto collect configs
local plantList = {}

local function buildPlantList()
    plantList = {}
    local farm = findfarm()
    if not farm then return end

    local folder = farm:FindFirstChild("Important")
    if not folder then return end

    local physical = folder:FindFirstChild("Plants_Physical")
    if not physical then return end

    for _, object in pairs(physical:GetChildren()) do
        for _, child in pairs(object:GetChildren()) do
            for _, firstprompt in pairs(child:GetChildren()) do
                if firstprompt:IsA("ProximityPrompt") then
                    table.insert(plantList, child)
                elseif firstprompt:IsA("Model") then
                    for _, part in pairs(firstprompt:GetChildren()) do
                        for _, prompt in pairs(part:GetChildren()) do
                            if prompt:IsA("ProximityPrompt") then
                                table.insert(plantList, part)
                            end
                        end
                    end
                end
            end
        end
    end
end

local function findplant()
    if #plantList == 0 then
        buildPlantList()
    end
    if #plantList == 0 then return end
    return plantList[math.random(1, #plantList)]
end

local plantconnection
local PlantState = false
local PlantCollectToggle = MainTab:CreateToggle({
    Name = "Auto Collect Plants",
    Description = "Collects all fully grown plants",
    CurrentValue = false,
    Callback = function(state)
        if plantconnection then
            plantconnection:Disconnect()
            plantconnection = nil
        end

        PlantState = state

        local Char = Player.Character or Player.CharacterAdded:Wait()
        local Root = Char:WaitForChild("HumanoidRootPart")
        local plantdebounce = false

        local function PickUpPlant()
            local plant = findplant()
            if plant then
                local plantpos = plant.Position
                local aboveposition = plantpos + Vector3.new(0, 15, 0)
                Root.CFrame = CFrame.new(aboveposition, plantpos)

                Root.Velocity = Vector3.zero
                Root.RotVelocity = Vector3.zero

                task.wait(0.1)

                local prompt = plant:FindFirstChildWhichIsA("ProximityPrompt", true)
                if prompt then
                    fireproximityprompt(prompt)
					task.wait(0.1)
					fireproximityprompt(prompt)
                end
            end
        end

        if PlantState then
            plantconnection = RunService.Heartbeat:Connect(function()
                if plantdebounce then return end
                plantdebounce = true

                PickUpPlant()
                task.wait(0.3)

                plantdebounce = false
            end)
        end
    end
})

-- Auto Sell Configs
local ShopPos = Vector3.new(86.57974243164062, 2.999999761581421, 0.42679181694984436)
local SellState = false
local selldebounce = false
local SellToggle = MainTab:CreateButton({
	Name = "Sell All Plants",
	Description = "Sells Everything In Your Inventory",
	Callback = function(state)
		if selldebounce then return end
		selldebounce = true

		SellState = state

		local Char = Player.Character or Player.CharacterAdded:Wait()
		local Hum = Char:WaitForChild("Humanoid")
		local Root = Char:WaitForChild("HumanoidRootPart")
		local startingpos = Root.Position

		local function SellPlant()
			Root.CFrame = CFrame.new(ShopPos)
			task.wait(0.2)
			SellAllEvent:FireServer()
			task.wait(0.2)
			Root.CFrame = CFrame.new(startingpos)

			Root.Velocity = Vector3.zero
			Root.RotVelocity = Vector3.zero
		end

		SellPlant()

		selldebounce = false
	end
})

-- Summer Harvest Configs
local function findstoredplant()
	local Folder = Player.Backpack
	if Folder then
		for _, object in pairs(Folder:GetChildren()) do
			for _, child in pairs(object:GetChildren()) do
				if child.Name == "Item_Seed" then
					return object
				end
			end
		end
	end
end

local function submitharvest(Root, TargetPos, Hum)
	local storedplant = findstoredplant()
	if storedplant then
		Root.CFrame = CFrame.new(TargetPos)
		Hum:EquipTool(storedplant)
		task.wait(0.5)
		local prompt = workspace.SummerHarvestEvent.Cart.PromptPart:FindFirstChild("SummerHarvestProxPrompt", true)
		if prompt then
			fireproximityprompt(prompt)
		end
		Hum:EquipTool(Player.Backpack:FindFirstChild("Shovel [Destroy Plants]"))
		return true
	end
	return false
end

local SubmitHarvestButton = MainTab:CreateButton({
	Name = "Submit Summer Harvest",
	Description = "Submits all your current plants for the summer harvest",
	Callback = function()
		local Char = Player.Character or Player.CharacterAdded:Wait()
		local Hum = Char:WaitForChild("Humanoid")
		local Root = Char:WaitForChild("HumanoidRootPart")
		local TargetPos = Vector3.new(-104.14794158935547, 8.400012016296387, -17.190385818481445)

		local Counter = 0
		local submitted = false
		repeat
			submitted = submitharvest(Root, TargetPos, Hum)
			Counter += 1
			task.wait(0.1)
		until submitted == false or Counter >= 100
	end
})

-- Shop
local ShopTab = Window:CreateTab({
	Name = "Shop",
	Icon = "local_grocery_store",
	ImageSource = "Material",
	ShowTitle = true
})

-- Seed Shop
local SeedTable = {}
local SeedSelectionDropdown
local function refreshSeedTable()
    SeedTable = {}
    local shopseedui = game:GetService("Players").LocalPlayer.PlayerGui.Seed_Shop.Frame.ScrollingFrame
    if shopseedui then
        for _, object in pairs(shopseedui:GetChildren()) do
            for _, child in pairs(object:GetChildren()) do
                if child.Name == "Main_Frame" then
                    table.insert(SeedTable, object.Name)
                end
            end
        end
    end
end

refreshSeedTable()

local seedselected
SeedSelectionDropdown = ShopTab:CreateDropdown({
    Name = "Seed Selected",
    Description = "Select your seed you want to purchase",
    Options = SeedTable,
    CurrentOption = SeedTable[1] or "",
    MultipleOptions = false,
    Callback = function(option)
        seedselected = option
    end
})

ShopTab:CreateButton({
    Name = "Purchase Seed Selected",
    Description = "Purchases the seed that you have selected from above",
    Callback = function()
        PurchaseEvent:FireServer(seedselected)
    end
})

-- Gear Shop
local GearTable = {}

local gearscrollingui = game:GetService("Players").LocalPlayer.PlayerGui.Gear_Shop.Frame.ScrollingFrame
for _, object in pairs(gearscrollingui:GetChildren()) do
	for _, child in pairs(object:GetChildren()) do
		if child.Name == "Main_Frame" then
			table.insert(GearTable, object.Name)
		end
	end
end

local GearSelected = nil
local GearSelectedDropdown = ShopTab:CreateDropdown({
	Name = "Gear Selected",
	Description = "Select the gear you want to buy",
	Options = GearTable,
	CurrentOption = GearTable[1] or "",
	MultipleOptions = false,
	Callback = function(option)
		GearSelected = option
	end
})

local PurchaseGear = ShopTab:CreateButton({
	Name = "Purchase Gear Selected",
	Description = "Purchases the gear you have selected",
	Callback = function()
		PurchaseGearEvent:FireServer(GearSelected)
	end
})

-- Creating Local player Tab
local LocalPlayerTab = Window:CreateTab({
	Name = "LocalPlayer",
	Icon = "account_circle",
	ImageSource = "Material",
	ShowTitle = true
})

-- Faster Walk
local WalkSpeedValue = 16
local WalkSpeedSlider = LocalPlayerTab:CreateSlider({
	Name = "Select Walk Speed",
	Range = {0, 300},
	Increment = 1,
	CurrentValue = 16,
    Callback = function(Value)
		WalkSpeedValue = Value
	end
})

local WalkSpeedState = false
local WalkSpeedToggle = LocalPlayerTab:CreateToggle({
	Name = "Toggle WalkSpeed",
	Description = nil,
	CurrentValue = false,
	Callback = function(state)
		WalkSpeedState = state

		local Char = Player.Character or Player.CharacterAdded:Wait()
		local Hum = Char:WaitForChild("Humanoid")

		if WalkSpeedState then
			task.spawn(function()
				while WalkSpeedState do
					Hum.WalkSpeed = WalkSpeedValue
					task.wait(0.1)
				end	
			end)
		else
			for i = 1, 10 do
				Hum.WalkSpeed = 16
				task.wait(0.1)
			end
		end
	end
})

-- Fly Configs
local FlyState = false
local IsFlying = false
local FlyConnection
local FlyInputConnection
local FlyEndedConnection
local FlyKeyConnection
local BodyGyro
local BodyVelocity
local FlySpeed = 150

local FlyingDirection = {
    Forward = false,
    BackWard = false,
    Left = false,
    Right = false,
    Up = false,
    Down = false,
}

local function StartFlying(Root)
    if not Root or not Root:IsA("BasePart") or Root.Anchored then
        warn("Invalid root part for flying. Cancelling StartFlying.")
        return
    end

    if BodyGyro then BodyGyro:Destroy() end
    if BodyVelocity then BodyVelocity:Destroy() end

    if FlyConnection then
        FlyConnection:Disconnect()
        FlyConnection = nil
    end

    BodyGyro = Instance.new("BodyGyro")
    BodyGyro.P = 9e9
    BodyGyro.MaxTorque = Vector3.new(9e9, 9e9, 9e9)
    BodyGyro.CFrame = workspace.CurrentCamera.CFrame
    BodyGyro.Parent = Root

    BodyVelocity = Instance.new("BodyVelocity")
    BodyVelocity.Velocity = Vector3.new(0, 0, 0)
    BodyVelocity.MaxForce = Vector3.new(9e9, 9e9, 9e9)
    BodyVelocity.Parent = Root

    IsFlying = true

    FlyConnection = RunService.RenderStepped:Connect(function()
        if FlyState then
            local Cam = workspace.Camera
            local MoveDirection = Vector3.new()

            if FlyingDirection.Forward then MoveDirection += Cam.CFrame.LookVector end
            if FlyingDirection.BackWard then MoveDirection -= Cam.CFrame.LookVector end
            if FlyingDirection.Right then MoveDirection += Cam.CFrame.RightVector end
            if FlyingDirection.Left then MoveDirection -= Cam.CFrame.RightVector end
            if FlyingDirection.Up then MoveDirection += Vector3.new(0, 1, 0) end
            if FlyingDirection.Down then MoveDirection -= Vector3.new(0, 1, 0) end

            if MoveDirection.Magnitude > 0 then
                BodyVelocity.Velocity = MoveDirection.Unit * FlySpeed
            else
                BodyVelocity.Velocity = Vector3.new(0, 0, 0)
            end
            BodyGyro.CFrame = Cam.CFrame
        end
    end)

    FlyInputConnection = Uis.InputBegan:Connect(function(Input, Gpe)
        if Gpe then return end
        if Input.KeyCode == Enum.KeyCode.W then FlyingDirection.Forward = true end
        if Input.KeyCode == Enum.KeyCode.S then FlyingDirection.BackWard = true end
        if Input.KeyCode == Enum.KeyCode.D then FlyingDirection.Right = true end
        if Input.KeyCode == Enum.KeyCode.A then FlyingDirection.Left = true end
        if Input.KeyCode == Enum.KeyCode.Space then FlyingDirection.Up = true end
        if Input.KeyCode == Enum.KeyCode.LeftControl then FlyingDirection.Down = true end
    end)

    FlyEndedConnection = Uis.InputEnded:Connect(function(Input)
        if Input.KeyCode == Enum.KeyCode.W then FlyingDirection.Forward = false end
        if Input.KeyCode == Enum.KeyCode.S then FlyingDirection.BackWard = false end
        if Input.KeyCode == Enum.KeyCode.D then FlyingDirection.Right = false end
        if Input.KeyCode == Enum.KeyCode.A then FlyingDirection.Left = false end
        if Input.KeyCode == Enum.KeyCode.Space then FlyingDirection.Up = false end
        if Input.KeyCode == Enum.KeyCode.LeftControl then FlyingDirection.Down = false end
    end)
end

local function StopFlying()
    if BodyGyro then BodyGyro:Destroy() end
    if BodyVelocity then BodyVelocity:Destroy() end

    if FlyConnection then
        FlyConnection:Disconnect()
        FlyConnection = nil
    end
    if FlyInputConnection then
        FlyInputConnection:Disconnect()
        FlyInputConnection = nil
    end
    if FlyEndedConnection then
        FlyEndedConnection:Disconnect()
        FlyEndedConnection = nil
    end

    for Key, _ in pairs(FlyingDirection) do
        FlyingDirection[Key] = false
    end

    IsFlying = false
end

local FlyToggle = LocalPlayerTab:CreateToggle({
    Name = "Fly",
    Description = "Press F to fly, Space to go up, Left Control to go down",
    CurrentValue = false,
    Callback = function(state)
        FlyState = state

        local Char = Player.Character or Player.CharacterAdded:Wait()
        local Root = Char:FindFirstChild("HumanoidRootPart")

        if FlyState then
            if not FlyKeyConnection then
                FlyKeyConnection = Uis.InputBegan:Connect(function(Input, Gpe)
                    if Gpe then return end

                    if Input.KeyCode == Enum.KeyCode.F then
                        if not IsFlying then
                            StartFlying(Root)
                        else
                            StopFlying()
                        end
                    end
                end)
            end
        else
            if FlyKeyConnection then
                FlyKeyConnection:Disconnect()
                FlyKeyConnection = nil
            end
            StopFlying()
        end
    end
}, "FlyToggle")

-- Server Hop Configs
local PlaceId = game.PlaceId

local function ServerHop()
	local servers = {}

	local success, response = pcall(function()
		return request({
			Url = "https://games.roblox.com/v1/games/"..PlaceId.."/servers/Public?sortOrder=Asc&limit=100"
		})
	end)

	if not success or not response or not response.Body then
		warn("Failed to fetch server list")
		return
	end

	local body
	local ok, err = pcall(function()
		body = HttpService:JSONDecode(response.Body)
	end)

	if not ok or not body or not body.data then
		warn("Failed to parse server list:", err)
		return
	end

	for _, v in pairs(body.data) do
		if v.playing and v.maxPlayers and v.id and v.id ~= game.JobId then
			if v.playing < v.maxPlayers then
				table.insert(servers, v.id)
			end
		end
	end

	if #servers > 0 then
		local randomServer = servers[math.random(1, #servers)]
		TeleportService:TeleportToPlaceInstance(PlaceId, randomServer)
	else
		warn("No available servers found")
	end
end

local ServerHopToggle = LocalPlayerTab:CreateButton({
	Name = "Server Hop",
	Description = "Joins a new server",
	Callback = function()
		ServerHop()
	end
})
